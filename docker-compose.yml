version: '3.8'

services:
  # Database service (optional - if you want to run PostgreSQL locally)
  # postgres:
  #   image: postgres:15-alpine
  #   environment:
  #     POSTGRES_DB: excalidraw-db
  #     POSTGRES_USER: excalidraw-db_owner
  #     POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-your-password}
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #   ports:
  #     - "5432:5432"
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U excalidraw-db_owner -d excalidraw-db"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5

  backend:
    build:
      context: .
      dockerfile: docker/docker.backend
      target: production
      args:
        - NODE_ENV=production
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - DATABASE_URL=${DATABASE_URL}
      - DB_URL=${DB_URL}
      - JWT_SECRET=${JWT_SECRET}
      - HTTP_PORT=${HTTP_PORT:-3001}
      - CORS_ORIGINS=${CORS_ORIGINS}
    ports:
      - "${HTTP_PORT:-3001}:${HTTP_PORT:-3001}"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${HTTP_PORT:-3001}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - app-network
    # depends_on:
    #   postgres:
    #     condition: service_healthy

  websocket:
    build:
      context: .
      dockerfile: docker/docker.websocket
      target: production
      args:
        - NODE_ENV=production
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - DATABASE_URL=${DATABASE_URL}
      - DB_URL=${DB_URL}
      - JWT_SECRET=${JWT_SECRET}
      - WS_PORT=${WS_PORT:-8081}
    ports:
      - "${WS_PORT:-8081}:${WS_PORT:-8081}"
    restart: unless-stopped
    networks:
      - app-network
    depends_on:
      - backend
    # depends_on:
    #   postgres:
    #     condition: service_healthy

  frontend:
    build:
      context: .
      dockerfile: docker/docker.frontend
      target: production
      args:
        - NODE_ENV=production
        - NEXT_PUBLIC_BACKEND_URL=${NEXT_PUBLIC_BACKEND_URL}
        - NEXT_PUBLIC_WEBSOCKET_URL=${NEXT_PUBLIC_WEBSOCKET_URL}
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - FRONTEND_PORT=${FRONTEND_PORT:-3000}
      - NEXT_PUBLIC_BACKEND_URL=${NEXT_PUBLIC_BACKEND_URL}
      - NEXT_PUBLIC_WEBSOCKET_URL=${NEXT_PUBLIC_WEBSOCKET_URL}
    ports:
      - "${FRONTEND_PORT:-3000}:${FRONTEND_PORT:-3000}"
    depends_on:
      - backend
      - websocket
    restart: unless-stopped
    networks:
      - app-network

  # Nginx reverse proxy (optional but recommended for production)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro  # Mount SSL certificates if available
    depends_on:
      - frontend
      - backend
      - websocket
    restart: unless-stopped
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

# volumes:
#   postgres_data:
